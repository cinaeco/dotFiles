set nocompatible "Don't have to try to be compatible with old vi

""""""""
"" Plugin Loading with Pathogen
"""""""""""""""""""""""""""""""""""""""""""""""""""
call pathogen#infect()


""""""""
"" General Behaviours
"""""""""""""""""""""""""""""""""""""""""""""""""""

set autoread "Read a file if it's changed from outside of vim
set splitbelow "New splits appear below current window instead of above
set splitright "New splits appear right of current window
set ttyfast "Smooth movement

" Persistent undo
if has("persistent_undo")
    set undofile
    set undodir=~/.vimundo
endif

"if version >= 700
"    set mouse=a "mouse support for 7.x, but don't use this if we use screen
"    because it has no effect, and then just becomes annoying for copy/paste
"endif 

if has("autocmd")
    " Enable filetype specific features
    filetype plugin indent on
    " Clear existing autocmd
    autocmd!
    " When editing a file, always jump to the last cursor position
    autocmd BufReadPost *
    \ if line("'\"") > 0 && line ("'\"") <= line("$") |
    \   exe "normal! g'\"" |
    \ endif

    autocmd WinEnter * setlocal cursorline
    autocmd WinLeave * setlocal nocursorline

    " Source the vimrc file after saving it
    autocmd bufwritepost .vimrc source $MYVIMRC
    " so far, this startup just opens NERDTree when there are no arguments
    autocmd VimEnter * call StartUp()
else
    set autoindent on
endif


""""""""
"" Start Up
"""""""""""""""""""""""""""""""""""""""""""""""""""
function! StartUp()
    " Stuff in here will be called by autocmd below
    if 0 == argc()
        "NERDTree
    end
endfunction


""""""""
"" Tabs and Text Formatting
""""""""""""""""""""""""""""""""""""""""""""""""""""""

set expandtab       " change to single spaces
set tabstop=2       " actual tab press distance
set shiftround      " indent to nearest tabstops
set shiftwidth=2    " amount to indent with > and <
set smarttab        " backspace tabs where appropriate even if spaces
set softtabstop=2   " let backspace delete indent
set wrap lbr        " wrap long lines of text
set backspace=eol,start,indent "backspace over everything
set textwidth=80


""""""""
"" UI - Colours
""""""""""""""""""""""""""""""""""""""""""""""""""""""

syntax enable
colorscheme solarized
set t_Co=16
set background=dark
set colorcolumn=+1
hi Folded ctermfg=darkred "set colour for folded lines


""""""""
"" UI - Numbering
""""""""""""""""""""""""""""""""""""""""""""""""""""""""

set number "show line numbers
set ruler "show row,col count in status line
set rulerformat=%55(%{strftime('%a\ %b\ %e\ %I:%M\ %p')}\ %5l,%-6(%c%V%)\ %P%)
set laststatus=2 "always show a status line
"set relativenumber "current line always 0 (requires 7.3 and up)


""""""""
"" UI - Code Folding
""""""""""""""""""""""""""""""""""""""""""""""""""""""""

set foldmethod=indent
set foldlevel=10
set foldtext=MyFoldText()

function! MyFoldText()
    let line = getline(v:foldstart)
    let indent = indent(v:foldstart)
    let indentOnly = strpart(line, 0, indent-1)
    let linecount = v:foldend+1 - v:foldstart
    let plural = ""
    if linecount != 1
        let plural = "s"
    endif
    let foldtext = '+'.indentOnly.'... ('.linecount.' More lines)'
    return foldtext
endfunction


""""""""
"" UI - Search
""""""""""""""""""""""""""""""""""""""""""""""""""""""""

set hlsearch    " make searches highlighted
set incsearch   " vim will search as you type!
set ignorecase  " ignore case for searches
set smartcase   " well, unless a user puts in uppercase search characters
set magic       " enables wildcard searching


""""""""
"" Key Remaps and Shortcuts 
""""""""""""""""""""""""""""""""""""""""""""""""""""""""

let mapleader = "," "Leader key lets you make more kinds of shortcuts!

" Edit .vimrc
map <leader>v   :e $MYVIMRC<CR>

" More convenient escape
imap ii <Esc>
imap II <Esc>

" Add extra lines up and down
nmap <leader>j o<Esc>k
nmap <leader>k O<Esc>j

" Toggle numbering
nmap <silent> <leader>n    :set number!<CR>
" Toggle paste with/without indenting
nmap <silent> <leader>p    :set paste! paste?<CR>
" Toggle showing whitespace characters
nmap <silent> <leader>l    :set list! <CR>
" Toggle scrollbind for moving multiple splits in sync together
nmap <silent> <leader>s    :set scrollbind! scrollbind?<CR>
" Toggle NERDTree instead of the normal dir browser
map <silent> <leader>d    :NERDTreeToggle<CR>
" Toggle Commenting out lines with NERDCommenter
nnoremap <silent> <leader>,    :call NERDComment("n", "toggle")<CR>
vnoremap <silent> <leader>,    <ESC>:call NERDComment("x", "toggle")<CR>

" Search with ack!
nnoremap <leader>a :Ack <cword><CR>
nnoremap <leader>A :LAck <cword><CR>
vnoremap <leader>a :Ack <cword><CR>
vnoremap <leader>A :LAck <cword><CR>

" Colemak layout for INSERT mode only
" Qwerty  - qwertyuiopasdfghjkl;'zxcvbnm,./
" Colemak - qwfpgjluy;arstdhneio'zxcvbkm,./
inoremap <silent> e f
inoremap <silent> r p
inoremap <silent> t g
inoremap <silent> y j
inoremap <silent> u l
inoremap <silent> i u
inoremap <silent> o y
inoremap <silent> p ;
inoremap <silent> s r
inoremap <silent> d s
inoremap <silent> f t
inoremap <silent> g d
inoremap <silent> j n
inoremap <silent> k e
inoremap <silent> l i
inoremap <silent> ; o
inoremap <silent> n k

inoremap <silent> E F
inoremap <silent> R P
inoremap <silent> T G
inoremap <silent> Y J
inoremap <silent> U L
inoremap <silent> I U
inoremap <silent> O Y
inoremap <silent> P :
inoremap <silent> S R
inoremap <silent> D S
inoremap <silent> F T
inoremap <silent> G D
inoremap <silent> J N
inoremap <silent> K E
inoremap <silent> L I
inoremap <silent> : O
inoremap <silent> N K


""""""""
"" Key Remaps - Movement and Windows
""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" jump to beginning and end of line easier
nmap H ^
nmap L $

" Smart way to move btw. windows
nmap <C-j> <C-W>j
nmap <C-k> <C-W>k
nmap <C-h> <C-W>h
nmap <C-l> <C-W>l

" window resizing
noremap + <C-w>10+
noremap - <C-w>10-

" mapping to make movements operate on 1 screen line in wrap mode
function! ScreenMovement(movement)
    if &wrap
        return "g" . a:movement
    else
        return a:movement
    endif
endfunction

onoremap <silent> <expr> j ScreenMovement("j")
onoremap <silent> <expr> k ScreenMovement("k")
onoremap <silent> <expr> 0 ScreenMovement("0")
onoremap <silent> <expr> ^ ScreenMovement("^")
onoremap <silent> <expr> $ ScreenMovement("$")
nnoremap <silent> <expr> j ScreenMovement("j")
nnoremap <silent> <expr> k ScreenMovement("k")
nnoremap <silent> <expr> 0 ScreenMovement("0")
nnoremap <silent> <expr> ^ ScreenMovement("^")
nnoremap <silent> <expr> $ ScreenMovement("$")


""""""""
"" Plugin options
""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" let g:NERDTreeQuitOnOpen = 1
" let g:SuperTabDefaultCompletionType = 'context'
