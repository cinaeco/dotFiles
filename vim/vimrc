set nocompatible    " Don't have to try to be compatible with old vi
set encoding=utf-8

""""""""
"" Plugin Loading with Pathogen
"""""""""""""""""""""""""""""""""""""""""""""""""""
call pathogen#infect()
call pathogen#helptags()


""""""""
"" Environment - What kind of machine are we on?
"""""""""""""""""""""""""""""""""""""""""""""""""""

if has("unix")
  " remove the newline character from the uname command
  let s:uname = substitute(system("uname"), "\n", "", "")
endif


""""""""
"" General Behaviours
"""""""""""""""""""""""""""""""""""""""""""""""""""

set splitbelow    " New splits appear below current window instead of above
set splitright    " New splits appear right of current window
set ttyfast       " Smooth movement
set ttymouse=xterm2

" Persistent undo
if has("persistent_undo")
    set undofile
    set undodir=~/.vimundo
endif

if has("autocmd")
    " Enable filetype specific features
    filetype plugin indent on

    " Clear existing autocmd
    autocmd!

    " When editing a file, always jump to the last cursor position
    autocmd BufReadPost *
    \ if line("'\"") > 0 && line ("'\"") <= line("$") |
    \   exe "normal! g'\"" |
    \ endif

    " Maps for Quickfix and Location List windows
    autocmd FileType qf nnoremap <silent> <buffer> q :ccl<CR>:lcl<CR>
    autocmd FileType qf nnoremap <silent> <buffer> o <CR>
    autocmd FileType qf nnoremap <silent> <buffer> go <CR><C-W><C-W>

    " Any actions on startup
    autocmd VimEnter * call StartUp()

    autocmd WinEnter * setlocal cursorline
    autocmd WinLeave * setlocal nocursorline

    " Show trailing white space
    autocmd InsertEnter * match ExtraWhitespace /\s\+\%#\@<!$/
    autocmd InsertLeave * match ExtraWhitespace /\s\+$/

    " Source the vimrc file after saving it
    autocmd bufwritepost .vimrc source $MYVIMRC

    " if the last window is NERDTree, then close Vim
    "autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTreeType") && b:NERDTreeType == "primary") | q | endif
else
    set autoindent on
endif


""""""""
"" Start Up
"""""""""""""""""""""""""""""""""""""""""""""""""""

function! StartUp()
    " start NERDTree if vim called with no arguments
    if 0 == argc()
        NERDTree
    end
endfunction


""""""""
"" Tabs and Text Formatting
""""""""""""""""""""""""""""""""""""""""""""""""""""""

set expandtab       " change to single spaces
set tabstop=2       " actual tab press distance
set shiftround      " indent to nearest tabstops
set shiftwidth=2    " amount to indent with > and <
set smarttab        " backspace tabs where appropriate even if spaces
set softtabstop=2   " let backspace delete by indents
set wrap lbr        " wrap long lines of text
set backspace=eol,start,indent "backspace over everything
set textwidth=80    " try to keep text within 80 characters
set colorcolumn=+1  " mark out the limits of the textwidth
set listchars=trail:_,tab:>.,eol:$


""""""""
"" UI - Colours
""""""""""""""""""""""""""""""""""""""""""""""""""""""

syntax enable
colorscheme solarized
set t_Co=16
set background=dark
" set colour for folded lines
highlight Folded term=none cterm=none ctermfg=darkred ctermbg=none
" show trailing white space
highlight ExtraWhitespace ctermfg=red ctermbg=red guifg=red guibg=red


""""""""
"" UI - Numbering
""""""""""""""""""""""""""""""""""""""""""""""""""""""""

set number          " show line numbers
"set relativenumber " current line always 0 (requires 7.3 and up)


""""""""
"" UI - Statusline (now using powerline)
""""""""""""""""""""""""""""""""""""""""""""""""""""""""

set laststatus=2    " status line is second last line (not hidden by commands)


""""""""
"" UI - Code Folding
""""""""""""""""""""""""""""""""""""""""""""""""""""""""

set foldmethod=indent
set foldlevel=10
set foldtext=FoldText()


""""""""
"" UI - Search
""""""""""""""""""""""""""""""""""""""""""""""""""""""""

set hlsearch    " make searches highlighted
set incsearch   " vim will search as you type!
set ignorecase  " ignore case for searches
set smartcase   " well, unless a user puts in uppercase search characters
set magic       " enables wildcard searching


""""""""
"" Key Remaps
""""""""""""""""""""""""""""""""""""""""""""""""""""""""

let mapleader = ","    " easier to use than \

" More convenient escape
imap ii <Esc>
imap II <Esc>

" Yank to end of line, like D deletes to end of line
nmap Y y$

" Clear trailing white space
nmap <silent> <leader>$    :%s/\s\+$//g<CR>

" Add extra lines up and down
nmap <leader>j    o<Esc>k
nmap <leader>k    O<Esc>j

" Edit .vimrc
nmap <leader>v    :e $MYVIMRC<CR>

nmap <silent> <leader>n    :set number!<CR>
nmap <silent> <leader>w    :set wrap!<CR>

" Toggle paste mode - no autoindenting of pasted material
nmap <silent> <leader>p    :set paste! paste?<CR>

" Toggle visible whitespace characters
nmap <silent> <leader>l    :set list!<CR>

" Toggle scrollbind for moving multiple splits in sync together
nmap <silent> <leader>s    :set scrollbind! scrollbind?<CR>

" Toggle mouse support.
nmap <silent> <leader>m    :call ToggleMouse()<CR>

" Toggle NERDTree file browser
nmap <silent> <leader>d    :NERDTreeToggle<CR>

" Toggle Commenting out lines with NERDCommenter
nmap <silent> <leader>,    :call NERDComment("n", "toggle")<CR>
vmap <silent> <leader>,    <ESC>:call NERDComment("x", "toggle")<CR>

" Traverse undo tree with Gundo!
nmap <silent> <leader>u    :GundoToggle<CR>

" Git blame with Fugitive!
nmap <silent> <leader>b    :Gblame<CR>

" Code heirarchy with Tagbar!
nmap <silent> <leader>t    :TagbarToggle<CR>


""""""""
"" Key Remaps - Movement and Windows
""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" jump to beginning and end of line easier
nmap H ^
nmap L $

" Smart way to move between windows
nmap <C-j> <C-W>j
nmap <C-k> <C-W>k
nmap <C-h> <C-W>h
nmap <C-l> <C-W>l

" mapping to make movements operate on 1 screen line in wrap mode
onoremap <silent> <expr> j ScreenMovement("j")
onoremap <silent> <expr> k ScreenMovement("k")
onoremap <silent> <expr> 0 ScreenMovement("0")
onoremap <silent> <expr> ^ ScreenMovement("^")
onoremap <silent> <expr> $ ScreenMovement("$")
nnoremap <silent> <expr> j ScreenMovement("j")
nnoremap <silent> <expr> k ScreenMovement("k")
nnoremap <silent> <expr> 0 ScreenMovement("0")
nnoremap <silent> <expr> ^ ScreenMovement("^")
nnoremap <silent> <expr> $ ScreenMovement("$")


""""""""
"" Plugin options
""""""""""""""""""""""""""""""""""""""""""""""""""""""""

""""""""" NERDTree
let g:NERDTreeQuitOnOpen = 1 " close sidebar after we go to selection


""""""""" Gundo
let g:gundo_width = 30
let g:gundo_preview_height = 12
let g:gundo_preview_bottom = 1


""""""""" Powerline
let g:Powerline_symbols = 'fancy' " alternatives: fancy, unicode


""""""""" Tagbar
let g:tagbar_autoclose = 1 " close sidebar after we go to selection


""""""""" EasyGrep
let g:EasyGrepJumpToMatch = 0


""""""""
"" Functions
""""""""""""""""""""""""""""""""""""""""""""""""""""""""

function! FoldText()
    let line = getline(v:foldstart)
    let indent = indent(v:foldstart)
    let indentOnly = strpart(line, 0, indent-1)
    let linecount = v:foldend+1 - v:foldstart
    let foldtext = '+'.indentOnly.'... ('.linecount.' More lines)'
    return foldtext
endfunction

function! ToggleMouse()
  if &mouse == 'a'
    set mouse=
    echo "Mouse usage disabled"
  else
    set mouse=a
    echo "Mouse usage enabled"
  endif
endfunction

function! ScreenMovement(movement)
    if &wrap
        return "g" . a:movement
    else
        return a:movement
    endif
endfunction
