"""""""
"" Remove Unwanted Bundles
"""""""""""""""""""""""""""""""""""""""""""""""""""

" We use our own powerline install
UnBundle 'bling/vim-airline'

" Great, but is slow when you work through tunnels, which I do a LOT.
UnBundle 'airblade/vim-gitgutter'

" This is not a fantastic idea, and is slow when working through tunnels.
UnBundle 'myusuf3/numbers.vim'

" Never go used to this
UnBundle 'Lokaltog/vim-easymotion'

" Don't care about gvim... yet.
UnBundle 'godlygeek/csapprox'


if has("autocmd")

  " Show trailing white space
  autocmd InsertEnter * match ExtraWhitespace /\s\+\%#\@<!$/
  autocmd InsertLeave * match ExtraWhitespace /\s\+$/

  " Source the vimrc file after saving it
  autocmd BufWritePost .vimrc.local nested source $MYVIMRC

  " QuickFix - Local remaps:
  "            - `q` to close qf buffer
  "            - `o` to open location entry under cursor
  autocmd FileType qf nnoremap <silent> <buffer> q :ccl<CR>:lcl<CR>
  autocmd FileType qf nnoremap <silent> <buffer> o <CR>

  " QuickFix - Global remaps:
  "            - `<TAB>` and `\` for previous and next location entry
  "            - unmaps when qf buffer is closed.
  autocmd BufWinEnter quickfix
        \ setlocal nocursorline |
        \ let g:qfix_win = bufnr("$") |
        \ call MapQfPrevNext()
  autocmd BufWinLeave *
        \ if exists("g:qfix_win") && expand("<abuf>") == g:qfix_win |
        \   unlet! g:qfix_win |
        \   call UnmapQfPrefNext() |
        \ endif

  " QuickFix - Open window after any grep invocation (Glog and Ggrep)
  autocmd QuickFixCmdPost *grep* cwindow |
        \ setlocal nocursorline |
        \ let g:qfix_win = bufnr("$") |
        \ call MapQfPrevNext()

  " Fugitive - Go up to previous tree object while exploring git tree with '..'
  autocmd User fugitive
    \ if fugitive#buffer().type() =~# '^\%(tree\|blob\)$' |
    \   nnoremap <buffer> .. :edit %:h<CR> |
    \ endif

  " Fugitive - Delete buffers when they are not active
  autocmd BufReadPost fugitive://* set bufhidden=delete

  " PHP - Offline docs, manpage-style, using `K`.
  " - needs pman installed through PEAR: `pear install doc.php.net/pman`
  if executable('pman')
    autocmd FileType php set keywordprg=pman
  endif

endif


""""""""
"" Tabs and Text Formatting
""""""""""""""""""""""""""""""""""""""""""""""""""""""

set tabstop=2       " actual tab press distance
set shiftround      " indent to nearest tabstops
set shiftwidth=2    " amount to indent with > and <
set smarttab        " backspace tabs where appropriate even if spaces
set softtabstop=2   " let backspace delete by indents
set textwidth=80    " try to keep text within 80 characters
set colorcolumn=+1  " mark out the limits of the textwidth
set fillchars=fold:.


""""""""
"" UI - Colours
""""""""""""""""""""""""""""""""""""""""""""""""""""""

set t_Co=16

" set colour for folded lines
highlight Folded term=none cterm=none ctermfg=darkred ctermbg=none

" show trailing white space
highlight ExtraWhitespace ctermfg=red ctermbg=red guifg=red guibg=red

" reverse indent guides highlighting
highlight IndentGuidesOdd ctermbg=darkgrey
highlight IndentGuidesEven ctermbg=black

""""""""
"" UI - Statusline (now using powerline)
""""""""""""""""""""""""""""""""""""""""""""""""""""""""


""""""""
"" UI - Code Folding
""""""""""""""""""""""""""""""""""""""""""""""""""""""""

set foldmethod=indent
set foldlevel=10
set foldtext=FoldText()


""""""""
"" Key Remaps
""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" More convenient escape
inoremap kj <ESC>
inoremap jk <ESC>

" Add extra lines up and down
nnoremap <leader>j    o<Esc>k
nnoremap <leader>k    O<Esc>j

" Edit .vimrc
"nnoremap <leader>v    :e $MYVIMRC<CR>

" Clear trailing white space
nnoremap <silent> <leader>$    :%s/\s\+$//g<CR>

" Convert tabs to spaces
nnoremap <silent> <leader><TAB>    :%s/<TAB>/  /g<CR>

" Space as a Folding toggle in normal mode.
nnoremap <silent> <space>     @=(foldlevel('.')?'za':"\<space>")<CR>

" Backspace to clear current search (and stop highlighting)
nnoremap <silent> <backspace>    :call ClearSearch()<CR>

nnoremap <silent> <leader>n    :set number!<CR>
nnoremap <silent> <leader>w    :set wrap!<CR>

" Toggle paste mode - no autoindenting of pasted material
nnoremap <silent> <leader>p    :set paste! paste?<CR>

" Toggle visible whitespace characters
nnoremap <silent> <leader>l    :set list!<CR>

" Toggle keyboard layout
nnoremap <silent> <leader><space>    :call CycleKeymap()<CR>

" Toggle scrollbind for moving multiple splits in sync together
nnoremap <silent> <leader>sb    :set scrollbind! scrollbind?<CR>

" Toggle mouse support.
"nnoremap <silent> <leader>m    :call ToggleMouse()<CR>

" Toggle NERDTree file browser
nnoremap <silent> <leader>d    :NERDTreeToggle<CR>

" Toggle Commenting out lines with NERDCommenter
nnoremap <silent> <leader>,    :call NERDComment("n", "toggle")<CR>
vnoremap <silent> <leader>,    <ESC>:call NERDComment("x", "toggle")<CR>

" Git commands with Fugitive
nnoremap <silent> <leader>gc   :Gcommit -v<CR>
"nnoremap <silent> <leader>gl   :Glog<CR><CR>
nnoremap <silent> <leader>gap  :Git add -p<CR>

" Function definition jumping with CtrlP's Funky plugin
nnoremap <silent> <C-F> :CtrlPFunky<CR>

""""""""
"" Key Remaps - Movement and Windows
""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" jump to beginning and end of line easier
nmap H ^
nmap L $
vmap H ^
vmap L $

" Smart way to move between windows
"nnoremap <C-j> <C-w>j
"nnoremap <C-k> <C-w>k
"nnoremap <C-h> <C-w>h
"nnoremap <C-l> <C-w>l

" mapping to make movements operate on 1 screen line in wrap mode
"onoremap <silent> <expr> j ScreenMovement("j")
"onoremap <silent> <expr> k ScreenMovement("k")
"onoremap <silent> <expr> 0 ScreenMovement("0")
"onoremap <silent> <expr> ^ ScreenMovement("^")
"onoremap <silent> <expr> $ ScreenMovement("$")
"nnoremap <silent> <expr> j ScreenMovement("j")
"nnoremap <silent> <expr> k ScreenMovement("k")
"nnoremap <silent> <expr> 0 ScreenMovement("0")
"nnoremap <silent> <expr> ^ ScreenMovement("^")
"nnoremap <silent> <expr> $ ScreenMovement("$")
"xnoremap <silent> <expr> j ScreenMovement("j")
"xnoremap <silent> <expr> k ScreenMovement("k")
"xnoremap <silent> <expr> 0 ScreenMovement("0")
"xnoremap <silent> <expr> ^ ScreenMovement("^")
"xnoremap <silent> <expr> $ ScreenMovement("$")


""""""""
"" Plugin options
""""""""""""""""""""""""""""""""""""""""""""""""""""""""

""""""""" Powerline
set rtp+=~/dotfiles/powerline/powerline/powerline/bindings/vim
set noshowmode " don't show e.g. --INSERT-- since we're using powerline


""""""""" Tagbar
let g:tagbar_autoclose = 1 " close sidebar after we go to selection


""""""""" Indent Guides
let g:indent_guides_auto_colors = 0
let g:indent_guides_guide_size = 2


""""""""" Syntastic
let g:syntastic_auto_jump = 1


""""""""" CtrlP
"let g:ctrlp_working_path_mode = 'rw' let's try out ra
let g:ctrlp_extensions = ['funky']


""""""""" Vdebug
let g:vdebug_options = {
  \ 'break_on_open' : 0,
  \ 'watch_window_style' : 'compact',
  \ 'path_maps' : {"/usr": "/jails/alcatraz/usr"}
\ }


""""""""" Vim Markdown
let g:vim_markdown_folding_disabled = 1


""""""""" Sparkup
let g:sparkupNextMapping = '<leader>n' " resolve conflict with vim-multiple-cursors

""""""""
"" Functions
""""""""""""""""""""""""""""""""""""""""""""""""""""""""

function! FoldText()
  let line = getline(v:foldstart)
  let indent = indent(v:foldstart)
  let indentOnly = strpart(line, 0, indent-1)
  let linecount = v:foldend+1 - v:foldstart
  let foldtext = '+'.indentOnly.'... ('.linecount.' More lines)'
  return foldtext
endfunction

function! ToggleMouse()
  if &mouse == 'a'
    set mouse=
    echo "Mouse usage disabled"
  else
    set mouse=a
    echo "Mouse usage enabled"
  endif
endfunction

function! ScreenMovement(movement)
  if &wrap
    return "g" . a:movement
  else
    return a:movement
  endif
endfunction

function! ClearSearch()
  if (@/ != "")
    let @/=""
    redraw
  endif
endfunction

function! CycleKeymap()
  if has('keymap')
    if (&keymap == '')
      set keymap=colemak
      echo "Colemak keymap selected"
    elseif (&keymap == 'colemak')
      set keymap=dvorak
      echo "Dvorak keymap selected"
    else
      set keymap=
      echo "Qwerty keymap selected"
    endif
  else
    echo "Keymaps not supported"
  endif
endfunction

function! MapQfPrevNext()
  exec "nmap <silent> <tab> :cprev<CR>"
  exec "nmap <silent> <bslash> :cnext<CR>"
endfunction

function! UnmapQfPrefNext()
  exec "nunmap <tab>"
  exec "nunmap <bslash>"
endfunction
